#!/bin/bash
#
# Copyright (c) 2025, Ben Morgan. All rights reserved.
# Use of this source code is governed by an MIT license that can be found in
# the LICENSE file.
#
set -e

declare pass_exe="/usr/bin/pass"
declare pass_store="$HOME/.password-store"
declare pass_prefix="git"
declare pass_suffix=".gpg"
declare verbose=false
declare version=0.1.1

usage() {
    cat <<"    EOF" | sed -r 's/^ {4}//'
    Usage: git-credential-pass [options]

    A simple, opinionated git-credential-helper for pass.

    Options:
      -h,--help           Show this usage message.
         --version        Print helper version.
      -x,--pass-exe PATH  Use this instead of $pass_exe
      -s,--store PATH     Use this password-store path.
      -p,--prefix PATH    Store prefix where I should look.
         --suffix EXT     Store entry filename suffix.
      -t,--test URL       Test helper with given URL.
      -v,--verbose        Print debugging messages.

    Warning:

      This is intended to be run by git as a credential helper.
      Only the 'get' credential action is supported, by design.

    Setup:

      1. Include it in your PATH or GIT_EXEC_PATH
      2. Configure git to use it:
         git config -g credential.helper pass
         git config -g credential.useHttpPath true
      3. Correctly set up and strucutre your password store

      Structure your password store like this:

        git/%h/%p

      Where:

        git : is your prefix
        %h  : hostname, like "github.com", "www.github.com", or "github.com:8080"
        %p  : path, like "/cassava" or "/cassava/git-credential-pass"
        %u  : user, like "cassava", currently not considered

      Entries should not end with a .git suffix, as these will not be considered.
      This script will then select the most closely matching entry:

        www.github.com/cassava/git-credential-pass
        www.github.com/cassava
        www.github.com
        github.com/cassava/git-credential-pass
        github.com/cassava
        github.com

      It may be ugly to have an entry and a folder both named identically,
      but it works:

        github.com
        github.com/organization

      Note that if there is a port number in the host, then it MUST
      be specified in the name of the store entry, either using : or #

        www.github.com:9473
        www.github.com#9473

      Please submit bug-reports: https://github.com/cassava/git-credential-pass
    EOF
}

declare cred_action=""
declare cred_testmode=false
declare -A attributes=(
    ["protocol"]=""
    ["host"]=""
    ["path"]=""
)

while [[ $# -ne 0 ]]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        --version)
            echo "git-credential-pass $version"
            exit 0
            ;;
        -x|--pass-exe)
            pass_exe="$2"
            shift
            ;;
        -s|--store)
            pass_store="$2"
            shift
            ;;
        -p|--prefix)
            pass_prefix="$2"
            shift
            ;;
        --suffix)
            pass_suffix="$2"
            shift
            ;;
        -t|--test)
            attributes["host"]="${2%%/*}"
            if [[ "$2" =~ / ]]; then
                attributes["path"]="${2#*/}"
            fi
            cred_testmode=true
            shift
            ;;
        -v|--verbose)
            verbose=true
            ;;
        store|erase|get)
            cred_action=$1
            ;;
        *)
            echo "error: unknown argument: $1" >&2
            exit 1
            ;;
    esac
    shift
done

# Validate pre-requisites:
if [[ -z "$cred_action" ]]; then
    # Git would provide an action, so it must be the user.
    usage >&2
    exit 1
elif [[ "$cred_action" != "get" ]]; then
    # The git handbook says to silently fail in this case.
    $verbose && echo "warning: $cred_action not supported" >&2
    exit 0
elif ! command -v "$pass_exe" >/dev/null; then 
    echo "error: $pass_exe not available" >&2
    exit 2
elif ! test -d "$pass_store"; then
    echo "error: $pass_store does not exist" >&2
    exit 2
fi

parse_input_attributes() {
    while read -r line; do
        key="${line%%=*}"
        val="${line#*=}"
        attributes["$key"]="$val"
    done

    if $verbose; then
        for key in "${!attributes[@]}"; do
            echo "$key: ${attributes[$key]}" >&2
        done
    fi
}

declare -a candidates
generate_pass_candidates() {
    host="${attributes["host"]}"
    path="${attributes["path"]%.git}"

    declare -a host_variants=()
    if [[ "$host" =~ ^[0-9.]+(:[0-9]+)?$ ]]; then
        # Do not shorten IP addresses
        host_variants+=("$host")
    elif [[ "$host" =~ \. ]]; then
        # Build list of progressively shortened hostnames
        IFS='.' read -r -a host_parts <<< "$host"
        for ((i=0; i<${#host_parts[@]} - 1; i++)); do
            sub_host=$(IFS='.'; echo "${host_parts[*]:i}")
            host_variants+=("$sub_host")
        done
    else
        host_variants+=("$host")
    fi

    # If host has a port number, then add an alternative windows-friendly
    # naming convention in addition using # to replace :.
    if [[ "$host" =~ :[0-9]+$ ]]; then
        for variant in "${host_variants[@]}"; do
            variant="$(echo "$variant" | sed -r 's/:([0-9]+)$/#\1/')"
            host_variants+=("$variant")
        done
    fi

    # Build list of progressively shorter paths
    IFS='/' read -r -a path_parts <<< "$path"
    declare -a path_variants=()
    for ((i=${#path_parts[@]}; i>=0; i--)); do
        sub_path=$(IFS=/; echo "${path_parts[*]:0:i}")
        [[ -n "$sub_path" ]] && path_variants+=("$sub_path")
    done
    path_variants+=("")  # Also try host-only entries

    # Build unique candidate paths
    declare -A seen
    for h in "${host_variants[@]}"; do
        for p in "${path_variants[@]}"; do
            candidate="$h"
            [[ -n "$p" ]] && candidate="$h/$p"
            if [[ -z "${seen[$candidate]}" ]]; then
                candidates+=("$candidate")
                seen["$candidate"]=1
            fi
        done
    done
}

filter_pass_candidates() {
    for entry in "${candidates[@]}"; do
        $verbose && echo "candidate: $entry" >&2
        pass_entry="${pass_prefix}/${entry}"
        pass_file="${pass_store}/${pass_entry}${pass_suffix}"
        if [[ -f "$pass_file" ]]; then
            echo "$pass_entry"
        fi
    done
}

print_pass_attributes() {
    local entry="$1"
    local contents
    contents="$($pass_exe show "$entry")"
    echo "$contents" | head -1 | sed -r 's/^/password=/'
    if [[ -z "${attributes["username"]}" ]]; then
        # Only provide username if it has not been already specified.
        # Here we ignore the password and match on first user: and username:
        echo "$contents" | tail -n +1 | sed -nr 's/user(name)?:\s*(.*)$/username=\2/p' | head -1                                        
    fi
}

if ! $cred_testmode; then
    parse_input_attributes
fi
generate_pass_candidates
filter_pass_candidates | head -1 | while read -r entry; do
    print_pass_attributes "$entry"
    break
done
